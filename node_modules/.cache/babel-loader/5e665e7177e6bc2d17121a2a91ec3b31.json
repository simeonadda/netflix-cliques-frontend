{"ast":null,"code":"var _jsxFileName = \"/Users/sim/sei-bromeliad/projects/netflix-cliques-frontend/netflix-cliques/src/Dashboard/SaveTitle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Container, Input, Text } from \"atomize\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = \"http://localhost:8000\";\n\nconst SaveTitle = props => {\n  _s();\n\n  const [img, setImg] = useState('');\n  const [title, setTitle] = useState('');\n  const [synopsis, setSynopsis] = useState('');\n  const [user, setUser] = useState('');\n  const [year, setYear] = useState('');\n\n  const setUserHandler = e => {\n    setImg(e.target.value);\n  };\n\n  const setImgHandler = e => {\n    setImg(e.target.value);\n  };\n\n  const setTitleHandler = e => {\n    setTitle(e.target.value);\n  };\n\n  const setSynopsisHandler = e => {\n    setSynopsis(e.target.value);\n  };\n\n  const setYearHandler = e => {\n    setImg(e.target.value);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const newTitleData = {\n      img: img,\n      title: title,\n      synopsis: synopsis,\n      user: user,\n      year: year\n    };\n\n    const saveNewTitleDataHandler = newTitleData => {\n      fetch(baseUrl + \"/api/v1/titles/add_title\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          img: newTitleData.img,\n          title: newTitleData.title,\n          synopsis: newTitleData.synopsis,\n          user: newTitleData.user,\n          year: newTitleData.year\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\"\n      }).then(resJson => {\n        const copyTitle = [...title];\n        copyTitle.push(resJson.data);\n        setTitle(copyTitle);\n      });\n    };\n\n    setImg('');\n    setTitle('');\n    setSynopsis('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: item.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: item.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: item.year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 75\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: item.user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 108\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: item.synopsis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 141\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        h: \"2.5rem\",\n        p: {\n          x: \"1rem\"\n        },\n        textSize: \"body\",\n        textColor: \"success700\",\n        hoverTextColor: \"success900\",\n        bg: \"transparent\",\n        hoverBg: \"success200\",\n        border: \"1px solid\",\n        borderColor: \"success700\",\n        hoverBorderColor: \"success900\",\n        m: {\n          r: \"0.5rem\"\n        },\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SaveTitle, \"mDfKqPQdTbiiN+hXNOet6lwwS1Q=\");\n\n_c = SaveTitle;\nexport default SaveTitle;\n\nvar _c;\n\n$RefreshReg$(_c, \"SaveTitle\");","map":{"version":3,"sources":["/Users/sim/sei-bromeliad/projects/netflix-cliques-frontend/netflix-cliques/src/Dashboard/SaveTitle.js"],"names":["React","useState","Button","Container","Input","Text","baseUrl","SaveTitle","props","img","setImg","title","setTitle","synopsis","setSynopsis","user","setUser","year","setYear","setUserHandler","e","target","value","setImgHandler","setTitleHandler","setSynopsisHandler","setYearHandler","submitHandler","preventDefault","newTitleData","saveNewTitleDataHandler","fetch","method","body","JSON","stringify","headers","credentials","then","resJson","copyTitle","push","data","item","x","r"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,KAA5B,EAAmCC,IAAnC,QAA+C,SAA/C;;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAK,CAACC,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAK,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAK,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAK,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAA/B;;AAEA,QAAMkB,cAAc,GAAIC,CAAD,IAAO;AAC5BV,IAAAA,MAAM,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAIH,CAAD,IAAO;AAC3BV,IAAAA,MAAM,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,GAFD;;AAIA,QAAME,eAAe,GAAIJ,CAAD,IAAO;AAC7BR,IAAAA,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,QAAMG,kBAAkB,GAAIL,CAAD,IAAO;AAChCN,IAAAA,WAAW,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAFD;;AAIA,QAAMI,cAAc,GAAIN,CAAD,IAAO;AAC5BV,IAAAA,MAAM,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,GAFD;;AAIA,QAAMK,aAAa,GAAIP,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACQ,cAAF;AACA,UAAMC,YAAY,GAAG;AACnBpB,MAAAA,GAAG,EAAEA,GADc;AAEnBE,MAAAA,KAAK,EAAEA,KAFY;AAGnBE,MAAAA,QAAQ,EAAEA,QAHS;AAInBE,MAAAA,IAAI,EAAEA,IAJa;AAKnBE,MAAAA,IAAI,EAAEA;AALa,KAArB;;AAQA,UAAMa,uBAAuB,GAAID,YAAD,IAAkB;AAChDE,MAAAA,KAAK,CAACzB,OAAO,GAAG,0BAAX,EAAuC;AAC1C0B,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB1B,UAAAA,GAAG,EAAEoB,YAAY,CAACpB,GADC;AAEnBE,UAAAA,KAAK,EAAEkB,YAAY,CAAClB,KAFD;AAGnBE,UAAAA,QAAQ,EAAEgB,YAAY,CAAChB,QAHJ;AAInBE,UAAAA,IAAI,EAAEc,YAAY,CAACd,IAJA;AAKnBE,UAAAA,IAAI,EAAEY,YAAY,CAACZ;AALA,SAAf,CAFoC;AAS1CmB,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SATiC;AAY1CC,QAAAA,WAAW,EAAE;AAZ6B,OAAvC,CAAL,CAaGC,IAbH,CAaSC,OAAD,IAAa;AACnB,cAAMC,SAAS,GAAG,CAAC,GAAG7B,KAAJ,CAAlB;AACA6B,QAAAA,SAAS,CAACC,IAAV,CAAeF,OAAO,CAACG,IAAvB;AACA9B,QAAAA,QAAQ,CAAC4B,SAAD,CAAR;AACD,OAjBD;AAkBD,KAnBD;;AAuBA9B,IAAAA,MAAM,CAAC,EAAD,CAAN;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACD,GApCD;;AAsCA,sBACE,QAAC,SAAD;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEa,aAAhB;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEgB,IAAI,CAAClC;AAAnB;AAAA;AAAA;AAAA;AAAA,cADF,eACkC,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEkC,IAAI,CAAChC;AAAnB;AAAA;AAAA;AAAA;AAAA,cADlC,eACoE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEgC,IAAI,CAAC1B;AAAnB;AAAA;AAAA;AAAA;AAAA,cADpE,eACqG,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE0B,IAAI,CAAC5B;AAAnB;AAAA;AAAA;AAAA;AAAA,cADrG,eACsI,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE4B,IAAI,CAAC9B;AAAnB;AAAA;AAAA;AAAA;AAAA,cADtI,eAEE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,CAAC,EAAC,QAAxB;AAAiC,QAAA,CAAC,EAAE;AAAE+B,UAAAA,CAAC,EAAE;AAAL,SAApC;AAAmD,QAAA,QAAQ,EAAC,MAA5D;AAAmE,QAAA,SAAS,EAAC,YAA7E;AAA0F,QAAA,cAAc,EAAC,YAAzG;AAAsH,QAAA,EAAE,EAAC,aAAzH;AAAuI,QAAA,OAAO,EAAC,YAA/I;AAA4J,QAAA,MAAM,EAAC,WAAnK;AAA+K,QAAA,WAAW,EAAC,YAA3L;AAAwM,QAAA,gBAAgB,EAAC,YAAzN;AAAsO,QAAA,CAAC,EAAE;AAAEC,UAAAA,CAAC,EAAE;AAAL,SAAzO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3ED;;GAAMtC,S;;KAAAA,S;AA6EN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Container, Input, Text } from \"atomize\";\n\nconst baseUrl = \"http://localhost:8000\";\n\nconst SaveTitle = (props) => {\n  const[img, setImg] = useState('')\n  const[title, setTitle] = useState('')\n  const[synopsis, setSynopsis] = useState('')\n  const[user, setUser] = useState('')\n  const[year, setYear] = useState('')\n\n  const setUserHandler = (e) => {\n    setImg(e.target.value);\n  }\n\n  const setImgHandler = (e) => {\n    setImg(e.target.value);\n  }\n\n  const setTitleHandler = (e) => {\n    setTitle(e.target.value);\n  }\n\n  const setSynopsisHandler = (e) => {\n    setSynopsis(e.target.value);\n  }\n\n  const setYearHandler = (e) => {\n    setImg(e.target.value);\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    const newTitleData = {\n      img: img,\n      title: title,\n      synopsis: synopsis,\n      user: user,\n      year: year\n    };\n\n    const saveNewTitleDataHandler = (newTitleData) => {\n      fetch(baseUrl + \"/api/v1/titles/add_title\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          img: newTitleData.img,\n          title: newTitleData.title,\n          synopsis: newTitleData.synopsis,\n          user: newTitleData.user,\n          year: newTitleData.year\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n      }).then((resJson) => {\n        const copyTitle = [...title];\n        copyTitle.push(resJson.data)\n        setTitle(copyTitle)\n      });\n    };\n\n\n\n    setImg('');\n    setTitle('');\n    setSynopsis('');\n  }\n\n  return(\n    <Container>\n      <form onSubmit={submitHandler}>\n        <Input value={item.img}></Input><Input value={item.title}></Input><Input value={item.year}></Input><Input value={item.user}></Input><Input value={item.synopsis}></Input>\n        <Button type=\"submit\" h=\"2.5rem\" p={{ x: \"1rem\" }} textSize=\"body\" textColor=\"success700\" hoverTextColor=\"success900\" bg=\"transparent\" hoverBg=\"success200\" border=\"1px solid\" borderColor=\"success700\" hoverBorderColor=\"success900\" m={{ r: \"0.5rem\" }}>\n        Add\n        </Button>\n      </form>\n    </Container>\n  )\n}\n\nexport default SaveTitle;\n"]},"metadata":{},"sourceType":"module"}